<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>dragolabs</title><description>DevOps, Configuration Management, Сontinuous Integration и много других страшных слов</description><link>http://blog.dragolabs.org/</link><generator>Ghost 0.5</generator><lastBuildDate>Tue, 14 Apr 2015 16:39:31 GMT</lastBuildDate><atom:link href="http://blog.dragolabs.org/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Горячие клавиши</title><description>&lt;img src="http://blog.dragolabs.org/content/images/2015/04/Macbook-Keyboard-1920x1200-wide-wallpapers-net.jpg" alt="Горячие клавиши"&gt;&lt;p&gt;Всегда хотел активнее пользоваться сочетаниями клавиш, но все как-то лень было. В итоге, что-то запомнил, что-то каждый раз открываю заново. Так что теперь я решил все более-менее записать. &lt;/p&gt;

&lt;p&gt;В маке для обозначения сервисных клавиш решили придумать символы. Прикольно выглядит, но насчет удобства я бы поспорил. Изначально я хотел все описать, используя символы, но, посмотрев на результат, решил оставить текстовые обозначения.&lt;/p&gt;

&lt;p&gt;Сами символы выглядят так:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;⌥ – alt (option)&lt;/li&gt;
&lt;li&gt;⌘ – cmd (command)&lt;/li&gt;
&lt;li&gt;⇧ – shift &lt;/li&gt;
&lt;li&gt;⌃ – ctrl&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="terminalbash"&gt;Terminal (bash)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fn + left\right – в начало\конец строки&lt;/li&gt;
&lt;li&gt;ctrl + A\E – в начало\конец строки&lt;/li&gt;
&lt;li&gt;ctrl + D – удаляет символ справа от курсора&lt;/li&gt;
&lt;li&gt;ctrl + U – удаляет строку&lt;/li&gt;
&lt;li&gt;ctrl + K – удаляет все справа от курсора&lt;/li&gt;
&lt;li&gt;ctrl + W – удаляет все слева от курсора&lt;/li&gt;
&lt;li&gt;ctrl + R – интерактивный поиск по истории команд&lt;/li&gt;
&lt;li&gt;ctrl + T – меняет местами последние два символа&lt;/li&gt;
&lt;li&gt;esc + T –  меняет местами последние два слова&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="sublimetext"&gt;Sublime Text&lt;/h2&gt;

&lt;h4 id=""&gt;Выделение&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;cmd + L – выделение всей строки&lt;/li&gt;
&lt;li&gt;cmd + D – поиск и выделение для одновременного редактирования&lt;/li&gt;
&lt;li&gt;cmd + G – следующий одиночный результат в поиске&lt;/li&gt;
&lt;li&gt;ctrl + cmd + G – поиск и одновременное редактирование всех найденных частей текста&lt;/li&gt;
&lt;li&gt;cmd + shift + J – выделение всех дочерних элементов в блоке&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;Выравнивание&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ctrl + cmd + up\down – перенос строки вверх\вниз&lt;/li&gt;
&lt;li&gt;ctrl + cmd + A – выравниваение кода &lt;/li&gt;
&lt;li&gt;cmd + shift + D – дублировать текущую строку&lt;/li&gt;
&lt;li&gt;cmd + j – добавить к текущей строке следующую&lt;/li&gt;
&lt;li&gt;cmd + / – комментрировать\раскомментировать&lt;/li&gt;
&lt;li&gt;cmd + K + B – свернуть\показать сайдбар&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;Редактирование&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ctrl + backspace – удалить слово слева от курсора&lt;/li&gt;
&lt;li&gt;ctrl + del(fn + backspace) – удалить слова справа от курсора &lt;/li&gt;
&lt;li&gt;cmd + backspace – удалить все от курсора до начала строки&lt;/li&gt;
&lt;li&gt;cmd + K + K – удалить все от крусора до конца строки&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=""&gt;Прочее&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;cmd + P (cmd + T) – поиск файла по содержанию&lt;/li&gt;
&lt;li&gt;cmd + shift + P – внутренние команды&lt;/li&gt;
&lt;li&gt;ctrl + cmd + P – переключение между проектами&lt;/li&gt;
&lt;li&gt;cmd + shift + T – запуск терминала в каталоге файла&lt;/li&gt;
&lt;li&gt;cmd + shift + alt + T – запуск терминала в каталоге проекта&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="osx"&gt;OS X и везде&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;cmd + left\right – в начало\конец строки (в iTerm работает для переключения табов)&lt;/li&gt;
&lt;li&gt;cmd + ` – переключение между окнами одного приложения&lt;/li&gt;
&lt;li&gt;alt + left\right – перемещает курсор на слово влево\вправо (в iTerm в Preferences/Profile/Keys надо прописать значения Esc+f\Esc+b)&lt;/li&gt;
&lt;li&gt;alt + cmd + left\right – переключение между табами&lt;/li&gt;
&lt;li&gt;ctrl + tab (+ shift) – переключение между табами&lt;/li&gt;
&lt;/ul&gt;</description><link>http://blog.dragolabs.org/2015/04/13/shortcuts/</link><guid isPermaLink="false">68e49dae-a28c-46bc-8a4f-6553af74d1d0</guid><category>shortcuts</category><category>sublime text</category><category>os</category><category>terminal</category><dc:creator>ddr</dc:creator><pubDate>Mon, 13 Apr 2015 14:18:00 GMT</pubDate></item><item><title>USB-хаб, макбук и Android File Transfer</title><description>&lt;img src="http://blog.dragolabs.org/content/images/2015/04/2015-04-09-16-54-49.jpg" alt="USB-хаб, макбук и Android File Transfer"&gt;&lt;p&gt;Скорость офисного вай-фая никогда меня особо не радовала – слишком много разношерстных клиентов на наших немногочисленных тарелках висит. Я все мечтаю о док-станции для бука, наподобие &lt;a href="http://www.belkin.com/us/F4U085-Belkin/p/P-F4U085/"&gt;Thunderbolt™ 2 Express&lt;/a&gt;. Но пока приходится перебиваться хабами и USB сетевухами не яблочного производства. &lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm8.staticflickr.com/7725/17086804012_b7c404ec9e_c.jpg" alt="USB-хаб, макбук и Android File Transfer"&gt;
После установки дров для D-Link DUB-E100, все, вроде бы, работало. До отключения девайса. Как только хаб или саму сетевуху вытаскиваешь из бука, тот либо перестает реагировать на тачпад и клавиатуру, либо вовсе фризится. Помогает в таком случае только жестокий ребут машинки. После непродолжительного гуглинга выявился кандидат на получение по шапке. Им оказался Android File Transfer. Оказалось, что эта приблуда запускает своего агента, который отлавливает все USB девайсы, и это далеко не всегда проходит без последствий. Для решения проблемы совсем не обязательно удалять полезную утилитку, достаточно ампутировать сам агент. 
Сначала стоит удалить агент из автозагрузки. &lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm8.staticflickr.com/7674/16900842600_fbd2621a12_o.png" alt="USB-хаб, макбук и Android File Transfer"&gt;&lt;/p&gt;

&lt;p&gt;После этого надо удалить сам agent.app, т.к. он самовосстанавливается при старте самого переносчика файлов. &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;rm -r ~/Library/Application\ Support/Google/Android\ File\ Transfer/Android\ File\ Transfer\ Agent.app

cd /Applications/Android\ File\ Transfer.app/Contents/Resources

mv Android\ File\ Transfer\ Agent.app Android\ File\ Transfer\ Agent.app.disable  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;На этом все. После этого никаких зависаний или игнорирования клавиатуры.&lt;/p&gt;</description><link>http://blog.dragolabs.org/2015/04/09/usb-khab-makbuk-i-android-file-transfer/</link><guid isPermaLink="false">134ab34c-b621-46f2-af5d-e84b8bd5755e</guid><category>osx</category><category>tips</category><category>mac</category><dc:creator>ddr</dc:creator><pubDate>Thu, 09 Apr 2015 13:52:58 GMT</pubDate></item><item><title>Блог на Ghost</title><description>&lt;p&gt;С блогами у меня всегда что-то не получалось — то лень, то страшный, то неудобный. Я пробовал и &lt;a href="http://dragolabs.livejournal.com"&gt;ЖЖ&lt;/a&gt;, и &lt;a href="http://dragolabs.tumblr.com/"&gt;тумблер&lt;/a&gt;, и даже &lt;a href="http://blogspot.com"&gt;blogspot&lt;/a&gt;. Потом наткнулся на octopress, который сразу понравился своим минимализмом. Он красив, шустр, можно размещать на халявном GitHub Pages. Но он давно не обновлялся и немного загонен. Не так сильно, как его предок Jekyll, но все же кодерских действий в нем, как в обычном проекте. &lt;/p&gt;

&lt;p&gt;Так что с блогами у меня не вязалось. Но сохранять описания своих действий все же хочется, поэтому я снова вдарился в поиски. В критериях были простота, удобство и поддержка markdown. Тут-то я наткнулся на &lt;a href="http://ghost.org"&gt;Ghost&lt;/a&gt;. Поднимается он легко, базу особо не требует. А тут еще нашел генератор статики из него, чтобы можно было заливать сайт на гитхаб. Он мне так понравился, что теперь мы даже используем его в админском отделе в качестве хранилища документации. Множество википедий у нас не шло так же, как у меня блог сервисы. Ниже опишу основные моменты, с которыми я имел дело при настройке.&lt;/p&gt;

&lt;h4 id=""&gt;Установка&lt;/h4&gt;

&lt;p&gt;На машине достаточно установленного nodejs (и MySQL\PostgreSQL, если нужна тяжелая база)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;качаем архив с движком с &lt;a href="https://ghost.org/download/"&gt;https://ghost.org/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;разархивируем его, куда надо&lt;/li&gt;
&lt;li&gt;ставим нужные модули &lt;code&gt;npm install --production&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;запускаем дев окружение &lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;в браузере открываем &lt;a href="http://localhost:2368"&gt;http://localhost:2368&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;для доступа в админку ломимся в &lt;a href="http://localhost:2368/ghost"&gt;http://localhost:2368/ghost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;profit!&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;ddr@Vitalys-MacBook-Pro /tmp/blog $ wget https://ghost.org/zip/ghost-0.5.10.zip

ddr@Vitalys-MacBook-Pro /tmp/blog $ unzip ghost-0.5.10.zip -d ghost

ddr@Vitalys-MacBook-Pro /tmp/blog $ cd ghost

ddr@Vitalys-MacBook-Pro /tmp/blog/ghost $ npm install --production  
npm WARN engine html-to-text@1.2.0: wanted: {"node":"&amp;gt;= 0.8.0 &amp;lt;0.12"} (current: {"node":"0.12.0","npm":"2.5.1"})

&amp;gt; sqlite3@3.0.5 install /private/tmp/blog/ghost/node_modules/sqlite3
&amp;gt; node-pre-gyp install --fallback-to-build
[... много текста ...]
sqlite3@3.0.5 node_modules/sqlite3  
└── nan@1.6.2

ddr@Vitalys-MacBook-Pro /tmp/blog/ghost $ npm start

&amp;gt; ghost@0.5.10 start /private/tmp/blog/ghost
&amp;gt; node index

Migrations: Database initialisation required for version 003  
Migrations: Creating tables...  
Migrations: Creating table: posts  
Migrations: Creating table: users  
Migrations: Creating table: roles  
Migrations: Creating table: roles_users  
Migrations: Creating table: permissions  
Migrations: Creating table: permissions_users  
Migrations: Creating table: permissions_roles  
Migrations: Creating table: permissions_apps  
Migrations: Creating table: settings  
Migrations: Creating table: tags  
Migrations: Creating table: posts_tags  
Migrations: Creating table: apps  
Migrations: Creating table: app_settings  
Migrations: Creating table: app_fields  
Migrations: Creating table: clients  
Migrations: Creating table: accesstokens  
Migrations: Creating table: refreshtokens  
Migrations: Populating fixtures  
Migrations: Populating permissions  
Migrations: Creating owner  
Migrations: Populating default settings  
Migrations: Complete

Ghost is running in development...  
Listening on 127.0.0.1:2368  
Url configured as: http://localhost:2368/  
Ctrl+C to shut down  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="githubpages"&gt;Загрузка на GitHub Pages&lt;/h4&gt;

&lt;p&gt;Сперва я хотел уже заказывать сервер на &lt;a href="https://www.digitalocean.com/?refcode=632349684665"&gt;DigitalOcean&lt;/a&gt;, но черт меня дернул загуглить размещение блога ghost на гитхабе. И я нашел небольшой хак на питоне &lt;a href="https://github.com/axitkhurana/buster"&gt;Buster&lt;/a&gt;, который парсит сайт и генерирует статические страниы для загрузки на GitHub Pages. 
Для бастера нужны wget и git.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Устанавливаем бастера &lt;code&gt;pip install buster&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Создаем директорию для репозитория блога&lt;/li&gt;
&lt;li&gt;На гитхабе создаем репозиторий для блога&lt;/li&gt;
&lt;li&gt;Подготваливаем локальный репозиторий бастера &lt;code&gt;buster setup --gh-repo=&amp;lt;git_repo&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Генерируем статику &lt;code&gt;buster generate --domain=localhost:2368&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Заливаем на гитхаб &lt;code&gt;buster deploy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;ddr@Vitalys-MacBook-Pro ~ $ mkdir /tmp/blog-git  
ddr@Vitalys-MacBook-Pro ~ $ cd /tmp/blog-git  
ddr@Vitalys-MacBook-Pro /tmp/blog-git $ buster setup --gh-repo="git@github.com:dragolabs/dragolabs.github.io.git"  
ddr@Vitalys-MacBook-Pro /tmp/blog-git $ buster generate --domain=http://127.0.0.1:2368  
-2015-03-25 12:17:50--  http://127.0.0.1:2368/
Connecting to 127.0.0.1:2368... connected.  
HTTP request sent, awaiting response... 200 OK  
Length: 4663 (4.6K) [text/html]  
Saving to: '/private/tmp/2/static/index.html'  
[... много текста ...]
fixing links in  /private/tmp/2/static/rss/index.rss  
ddr@Vitalys-MacBook-Pro /tmp/blog-git $ buster deploy  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=""&gt;Подсветка синтаксиса&lt;/h4&gt;

&lt;p&gt;Есть много вариантов включения подсветки кода. Подсветка есть в некоторых темах, можно подключить скрипт от гугла. Мне больше всего приглянулись два варианта.&lt;/p&gt;

&lt;h6 id="highlightsjs"&gt;Highlights.js&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://highlightjs.org/"&gt;https://highlightjs.org/&lt;/a&gt; &lt;br&gt;
Написан авторами хабра, знает много языков, имеет много тем, владеет функцией автоопределения языка в блоке кода. Сборка с самыми популярными языками доступна к прямому подключению, ибо выложена на CDN. Его я выбрал для админского хранилища доков, как раз за автоопределение. &lt;/p&gt;

&lt;h6 id="prismjs"&gt;Prism.js&lt;/h6&gt;

&lt;p&gt;&lt;a href="http://prismjs.com/"&gt;http://prismjs.com/&lt;/a&gt; &lt;br&gt;
Легкий, 6 тем, чуть меньше языков, используется кучей популярных проектов. Для подключения надо сгенерировать и залить к себе. В отличие от предыдущего кандидата, имеет подключаемые модули для нумерации и выделения строк, выделения ссылок, подстветки символов итд. Его я выбрал для себя, т.к. его тема мне более симпатична.&lt;/p&gt;

&lt;p&gt;Подключаются оба варианта одинаково. Если не использовать готовый скрипт с CDN, генерируем и скачиваем файлы, и кидаем их в &lt;code&gt;_blog_/content/themes/_theme_name_/assets/css&lt;/code&gt; и &lt;code&gt;_blog_/content/themes/_theme_name_/assets/js&lt;/code&gt; соответственно. В  $theme_name теме, в default.hbs в секции &lt;code&gt;{{! Styles'n'Scripts }}&lt;/code&gt; дописываем подключение css и js. Многие рекомендуют подключать js в самом низу страницы, но у меня и вверху все прекрасно работает.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markup"&gt;    {{! Styles'n'Scripts }}
    &amp;lt;link rel="stylesheet" type="text/css" href="{{asset "css/screen.css"}}" /&amp;gt;
    &amp;lt;link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans:700,400" /&amp;gt;

    &amp;lt;link rel="stylesheet" type="text/css" href="{{asset "css/prism.css"}}" /&amp;gt; 
    &amp;lt;script type="text/javascript" src="{{asset "js/prism.js"}}"&amp;gt;&amp;lt;/script&amp;gt;

    {{! Ghost outputs important style and meta data with this tag }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В случае highlights.js для автоопределения надо будет подключить еще один js скрипт.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markup"&gt;    {{! Styles'n'Scripts }}
    &amp;lt;link rel="stylesheet" type="text/css" href="{{asset "css/screen.css"}}" /&amp;gt;
    &amp;lt;link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans:700,400" /&amp;gt;

    &amp;lt;link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/monokai_sublime.min.css"&amp;gt;
    &amp;lt;script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;

    {{! Ghost outputs important style and meta data with this tag }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="disqus"&gt;Комментарии Disqus&lt;/h4&gt;

&lt;p&gt;Для подключения комментариев достаточно зарегистрироваться в &lt;a href="http://disqus.com"&gt;Disqus&lt;/a&gt; и вставить кусок кода, как указано в их &lt;a href="https://help.disqus.com/customer/portal/articles/1454924-ghost-installation-instructions"&gt;документации&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=""&gt;Поиск&lt;/h4&gt;

&lt;p&gt;Для статичного сайта поиск актуален больше с помощью гугла, а вот во внутренней документации локальный поиск просто необходим. Подключать его не столько трудно, сколько геморно его более-менее красиво вставить.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Топаем на &lt;a href="https://github.com/jamalneufeld/ghostHunter"&gt;https://github.com/jamalneufeld/ghostHunter&lt;/a&gt; и качаем архив с полезным js скриптом&lt;/li&gt;
&lt;li&gt;Минимизированный js скидываем в уже знакомый каталог &lt;code&gt;_blog_/content/themes/_theme_name_/assets/js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;В $theme_name в default.hbs в перед &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; подлючаем наш js.&lt;/li&gt;
&lt;li&gt;И в понравившемся нам месте размещаем поле и кнопку поиска, и секцию для вывода результатов.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-markup"&gt;&amp;lt;form&amp;gt;  
  &amp;lt;input id="search-field" /&amp;gt;
  &amp;lt;input type="submit" value="search"&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;section id="results"&amp;gt;&amp;lt;/section&amp;gt;

$("#search-field").ghostHunter({
  results   : "#results"
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В принципе, на этом можно остановиться, но общий вид меня удручал, так что я убрал вообще кнопку поиска, облагородил поле ввода и перенес поле и вывод результата наверх. И добавил эти поля во все шаблоны (пост, тэг, индекс) вместо использования одного только default, где можно вставить поле либо над лого, либо ниже футера.&lt;/p&gt;

&lt;p&gt;default.hbs  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markup"&gt;    {{! The main JavaScript file for Casper }}
    &amp;lt;script type="text/javascript" src="{{asset "js/jquery.fitvids.js"}}"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type="text/javascript" src="{{asset "js/index.js"}}"&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script src="{{asset "js/jquery.ghostHunter.min.js"}}"&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
        $("#search-field").ghostHunter({
            results   : "#results"
        });
    &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;index.hbs  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markup"&gt;&amp;lt;/header&amp;gt;


&amp;lt;form class="site-search"&amp;gt;  
    &amp;lt;input type="search" id="search-field" placeholder="Search" class="search-box" /&amp;gt;
&amp;lt;/form&amp;gt;  
&amp;lt;section id="results" class="search-results"&amp;gt;&amp;lt;/section&amp;gt;

{{! The main content area on the homepage }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;screen.css  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-css"&gt;.search-box{
    width: 250px;
    float: right;
    display: block;
    font-size: 1.8rem;
    margin-right: 10px;
}
.search-results{
    position: relative;
    display: block;
    margin: 0 auto;
    text-align: center;
    width: 80%;
    background: #eee;
    max-width: 870px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="forever"&gt;Запуск через forever&lt;/h4&gt;

&lt;p&gt;Запускать сервер через &lt;code&gt;npm start&lt;/code&gt; хорошо, когда все ограничивается локальным компом. На сервере же управление процессом лучше доверить какому-нибудь демону. Вариантов масса: написать init скрипт, настроить runit, supervisord, forever, &lt;a href="https://github.com/Unitech/pm2"&gt;pm2&lt;/a&gt;. Я решил пока не заморачиваться, и использовать forever для хранилища доков. Для боевого сервера лучше использовать pm2, т.к. он умеет и генерить init скрипты, и мониторить процессы и что только.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ставим forever &lt;code&gt;npm install forever -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;под юзером проекта в проектном каталоге запускаем сервер &lt;code&gt;sudo -u ghost NODE_ENV=production forever start index.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;чтобы перезапустить ghost, можно сделать так &lt;code&gt;sudo -u ghost forever restartall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;чтобы блог запустился после рестарта системы, можно сделать init скрипт или дописать в &lt;code&gt;/etc/rc.local&lt;/code&gt; команду запуска сервера&lt;/li&gt;
&lt;/ul&gt;</description><link>http://blog.dragolabs.org/2015/03/25/blogh-na-ghost/</link><guid isPermaLink="false">e2789f25-a126-4b61-baac-487994598307</guid><dc:creator>ddr</dc:creator><pubDate>Wed, 25 Mar 2015 09:42:43 GMT</pubDate></item><item><title>Первый день на новом маке</title><description>&lt;img src="https://farm4.staticflickr.com/3907/14444161651_59abed46f0_h.jpg" alt="Первый день на новом маке"&gt;&lt;p&gt;Наконец-то сбылась мечта идиота, и я стал флегматичным обладателем цельного куска анодированного аллюминия с примесями стекла. До этого уже успешно использовался хакинтош, построенный на гигабайтовской материнке, так что никаких проблем с переходом не ожидалось. На мак я перешел с винды по простой причине - для админства мне сейчас гораздо удобнее использовать *nix системы, а убунта, несмотря на ее юзабельность, проигрывает по части окружения. Нет в линуксе ни evernote, ни нормального скайпа. Там вообще для гуи мало чего путного. Мак, в свою очередь, тоже не лишен идиотизма и "оригинальных" решений. Однако же, по сравнению с той же убунтой, он много няшнее.&lt;/p&gt;

&lt;p&gt;Итак, сразу после установки обновлений, я принялся настраивать систему. Что было сделано:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;поменял хостнейм на нормальный. За каким-то чудом, мощный и брутальный MacBook Pro решил обозвать себя в консоли не иначе, как "air-ekaterina.office". Я, конечно, понимаю, что бук, скорее всего, был сбит с толку наглым DHCP сервером, но менять свое имя на Катю я как-то не спешил. Поэтому пришлось нагуглить, как поменять хостнейм в маке. Как выяснилось, линуксовый прием "поменяй хост в файлике" тут не прокатывает.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;sudo scutil --set HostName ddr-pro.local  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;поставил Homebrew (&lt;a href="http://brew.sh/"&gt;http://brew.sh/&lt;/a&gt;). Офигенная система портов. С помощью нее на маке появляется много милых и знакомых сисадмину утилит.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;с помощью брю поставил кучку полезняшек&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;brew doctor  
brew install htop mc nmap bash boot2docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;с башем тоже пришлось немного подвигаться, чтобы поменять комплектный маковский баш на более свежий&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;$ echo $BASH_VERSION
3.2.51(1)-release

echo "/usr/local/bin/bash" | sudo tee -a /etc/shells  
chsh -s /usr/local/bin/bash  
exit

$ echo $BASH_VERSION
4.3.27(1)-release  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;поставил просто кучку полезных программ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ну и поставил русскую раскладку от PC, ибо маковская дико бесит. И плевать, что раскладка расходится с нарисованным на кнопках.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://blog.dragolabs.org/2014/10/01/pervyi-den-na-novom-make/</link><guid isPermaLink="false">0d74c43f-6175-4597-80f6-9c9876427a41</guid><dc:creator>ddr</dc:creator><pubDate>Wed, 01 Oct 2014 20:13:00 GMT</pubDate></item></channel></rss>